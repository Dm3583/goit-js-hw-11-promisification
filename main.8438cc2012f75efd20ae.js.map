{"version":3,"sources":["webpack:///./js/delay.js","webpack:///./js/toggleUserState.js","webpack:///./js/makeTransaction.js"],"names":["delay","ms","Promise","resolve","setTimeout","console","log","logger","time","then","users","name","active","updatedUsers","table","noUser","toggleUserState","allUsers","userName","reject","map","user","find","catch","logSuccess","id","logError","warn","makeTransaction","transaction","min","max","Math","floor","random","res","amount"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPC,QAAQC,IAAR,iBAA8B,+BAC9BH,EAAQF,KACTA,OAILM,EAAS,SAAAC,GAAI,OAAIH,QAAQC,IAAR,kBAA8BE,EAA9B,OAIvBR,EAAM,KAAMS,KAAKF,GACjBP,EAAM,KAAMS,KAAKF,GACjBP,EAAM,MAAMS,KAAKF,G,4CCfXG,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAWrBL,EAAS,SAAAM,GAAY,OAAIR,QAAQS,MAAMD,IAEvCE,EAAS,SAAAJ,GAAI,OAAIN,QAAQC,IAAR,oBAAgCK,IAQjDK,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIhB,SAAQ,SAACC,EAASgB,GACzBf,YAAW,WACPC,QAAQC,IAAR,uBAAoC,iCAChBW,EACfG,KAAI,SAAAC,GAAI,OAAIA,EAAKV,QACjBW,MAAK,SAAAX,GAAI,OAAIO,IAAaP,MAE3BQ,EAAOD,GAEX,IAAML,EAAeI,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKV,OAASO,EAAd,iBAA8BG,EAA9B,CAAoCT,QAASS,EAAKT,SAAWS,KAEjElB,EAAQU,KACT,OAOXG,EAAgBN,EAAO,SAASD,KAAKF,GAAQgB,MAAMR,GACnDC,EAAgBN,EAAO,OAAOD,KAAKF,GAAQgB,MAAMR,GAEjDC,EAAgBN,EAAO,OAAOD,KAAKF,GAAQgB,MAAMR,GACjDC,EAAgBN,EAAO,UAAUD,KAAKF,GAAQgB,MAAMR,GClDpD,IAoCMS,EAAa,SAAC,GAAiB,IAAfC,EAAe,EAAfA,GAAIjB,EAAW,EAAXA,KACtBH,QAAQC,IAAR,uBAAoC,gCACpCD,QAAQC,IAAR,cAA2B,iCAC3BD,QAAQC,IAAR,eAA2BmB,EAA3B,iBAA8CjB,EAA9C,OAGEkB,EAAW,SAAAD,GACbpB,QAAQC,IAAR,uBAAoC,gCACpCD,QAAQC,IAAR,YAAyB,+BACzBD,QAAQsB,KAAR,gCAA6CF,EAA7C,8BAEEG,EAAkB,SAACC,GAErB,OAAO,IAAI3B,SAAQ,SAACC,EAASgB,GACzB,IAlD2BW,EAAKC,EAkD1B/B,GAlDqB8B,EAkDa,IAlDRC,EAkDa,IAjD1CC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAkDhD1B,YAAW,WAEP,GADmB4B,KAAKE,SAAW,GACnB,CACZ,IAAIC,EAAM,CAAEV,GAAII,EAAYJ,GAAIjB,KAAMR,GACtCG,EAAQgC,QAERhB,EAAOU,EAAYJ,MAExBzB,OAKX4B,EAAgB,CAAEH,GAAI,GAAIW,OAAQ,MAC7B3B,KAAKe,GACLD,MAAMG,GAEXE,EAAgB,CAAEH,GAAI,GAAIW,OAAQ,MAC7B3B,KAAKe,GACLD,MAAMG,GAEXE,EAAgB,CAAEH,GAAI,GAAIW,OAAQ,KAC7B3B,KAAKe,GACLD,MAAMG,GAEXE,EAAgB,CAAEH,GAAI,GAAIW,OAAQ,MAC7B3B,KAAKe,GACLD,MAAMG,K","file":"main.8438cc2012f75efd20ae.js","sourcesContent":["const delay = ms => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            console.log(`%c TIMER DELAY`, 'color: red; font-size: 25px');\r\n            resolve(ms);\r\n        }, ms)\r\n    });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n\r\n\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\n// const toggleUserState = (allUsers, userName, callback) => {\r\n//     const updatedUsers = allUsers.map(user =>\r\n//         user.name === userName ? { ...user, active: !user.active } : user,\r\n//     );\r\n\r\n//     callback(updatedUsers);\r\n// };\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\nconst noUser = name => console.log(`There is no user ${name}`);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            console.log(`%c Toggle user state`, 'color: green; font-size: 25px');\r\n            const isUserExist = allUsers\r\n                .map(user => user.name)\r\n                .find(name => userName === name);\r\n            if (!isUserExist) {\r\n                reject(userName);\r\n            }\r\n            const updatedUsers = allUsers.map(user =>\r\n                user.name === userName ? { ...user, active: !user.active } : user,\r\n            );\r\n            resolve(updatedUsers);\r\n        }, 0);\r\n    });\r\n};\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger).catch(noUser);\r\ntoggleUserState(users, 'Lux').then(logger).catch(noUser);\r\n\r\ntoggleUserState(users, 'Bob').then(logger).catch(noUser);\r\ntoggleUserState(users, 'Jayson').then(logger).catch(noUser);","const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//     const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//     setTimeout(() => {\r\n//         const canProcess = Math.random() > 0.3;\r\n//         if (canProcess) {\r\n//             onSuccess(transaction.id, delay);\r\n//         } else {\r\n//             onError(transaction.id);\r\n//         }\r\n//     }, delay);\r\n// };\r\n\r\n// const logSuccess = (id, time ) => {\r\n//     console.log(`Transaction ${id} processed in ${time}ms`);\r\n// };\r\n\r\n// const logError = id => {\r\n//     console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n// };\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n    console.log(`%c make transaction `, \"color: teal; font-size: 25px\");\r\n    console.log(`%c Success `, \"color: green; font-size: 14px\");\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n    console.log(`%c make transaction `, \"color: teal; font-size: 25px\");\r\n    console.log(`%c Error `, \"color: red; font-size: 14px\")\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\nconst makeTransaction = (transaction) => {\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n            if (canProcess) {\r\n                let res = { id: transaction.id, time: delay }\r\n                resolve(res);\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay);\r\n    })\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"],"sourceRoot":""}